# Generative Adversarial Networks in Slanted Land

**Author: Jessica Cervi**


## Activity Overview 

Generative adversarial networks (GANs) are a clever way of training a generative model by framing the problem as a supervised learning problem. The GAN model architecture involves two sub-models:

- Generator: to generate new plausible examples from the problem domain.
- Discriminator: to classify examples as real (from the domain) or fake (generated).

When training begins, the generator produces obviously fake data, and the discriminator quickly learns to tell that it's fake. As training progresses, the generator gets closer to producing output that can fool the discriminator.
Finally, if the generator training goes well, the discriminator gets worse at telling the difference between real and fake. It starts to classify fake data as real, and its accuracy decreases.



For this activity, we have adapted the code in [this](https://github.com/luisguiserrano/gans) GitHub repository, where you can also find a link to a YouTube video that provides useful insight on the code.

In this notebook, we build a very simple pair of GANs where the data consists of 2x2 black and white images, where the images we want to generate (the faces) are backwards diagonals (\\). Our goal is to define a GANs that is able to distinguish a real image from a fake one.


This assignment is designed to help you apply the machine learning algorithms you have learned using packages in `Python`. `Python` concepts, instruction, and starter code are embedded within this Jupyter Notebook to help guide you as you progress through the assignment. Remember to run the code of each code cell prior to submitting the assignment. Upon completing the assignment, we encourage you to compare your work against the solution file to perform a self-assessment.



## Index:

#### Week 7:    Generative Adversarial Networks in Slanted Land


- [Part 1](#part1)-  Importing the Libraries and Defining Auxiliary Functions
- [Part 2](#part2)-  Problem Setup
- [Part 3](#part3)-  Generating Noise (fake) Faces
- [Part 4](#part4)-  Defining the Probability Function
- [Part 5](#part5)-  Defining the Discriminator
- [Part 6](#part6)-  Defining the Generator
- [Part 7](#part7)-  Training the Network
